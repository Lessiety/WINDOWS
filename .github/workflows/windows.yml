name: RDP Windows Via CRD

on:
  workflow_dispatch:
    inputs:
      gh_crd_auth:
        description: "Auth Code CRD (from remotedesktop.google.com/headless)"
        required: true
      gh_pc_name:
        description: "PC Name (displayed in CRD)"
        required: true
        default: "RDP-SE"
      gh_pin_crd:
        description: "PIN (min 6 digits)"
        required: true
        default: "123321"
      runtime_minutes:
        description: "Runtime in minutes (max 360; default 355)"
        default: "355"

permissions:
  contents: read

defaults:
  run:
    shell: pwsh

env:
  RDP_USER: mycrd
  RDP_PASS: MySecurePass123

jobs:
  crd:
    runs-on: windows-2022
    timeout-minutes: 370
    steps:
      - name: üîß Resolve inputs
        id: cfg
        run: |
          function ToIntOr($v, $def){ if("$v" -match '^\d+$'){[int]$v}else{[int]$def} }

          $runtime = ToIntOr "${{ inputs.runtime_minutes }}" 355
          if ($runtime -gt 360) { $runtime = 355 }
          if ($runtime -lt 6) { $runtime = 355 }

          "code=${{ inputs.gh_crd_auth }}"   | Out-File -Append $env:GITHUB_OUTPUT
          "pcname=${{ inputs.gh_pc_name }}"  | Out-File -Append $env:GITHUB_OUTPUT
          "pin=${{ inputs.gh_pin_crd }}"     | Out-File -Append $env:GITHUB_OUTPUT
          "runtime=$runtime"                 | Out-File -Append $env:GITHUB_OUTPUT
          Write-Host "Resolved runtime=$runtime"

      - name: üîê Enable RDP user (optional, for local access)
        run: |
          $u="${{ env.RDP_USER }}"; $p="${{ env.RDP_PASS }}"
          $sec = ConvertTo-SecureString $p -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
            Enable-LocalUser -Name $u
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: üì• Download & Install Chrome Remote Desktop Host
        run: |
          $crdUrl = "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi"
          $crdMsi = "$env:TEMP\crdhost.msi"
          Invoke-WebRequest -Uri $crdUrl -OutFile $crdMsi -UseBasicParsing
          Start-Process "msiexec.exe" -ArgumentList "/i `"$crdMsi`" /quiet /norestart" -Wait

      - name: üöÄ Setup Chrome Remote Desktop
        run: |
          $crdPath = "${env:ProgramFiles(x86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          if (-not (Test-Path $crdPath)) {
            Write-Error "CRD not installed!"; exit 1
          }

          $code   = "${{ steps.cfg.outputs.code }}"
          $pcname = "${{ steps.cfg.outputs.pcname }}"
          $pin    = "${{ steps.cfg.outputs.pin }}"

          if ($pin.Length -lt 6 -or ($pin -notmatch '^\d+$')) {
            Write-Error "PIN must be at least 6 digits (numbers only)."; exit 1
          }

          & $crdPath `
            --code="$code" `
            --redirect-url="https://remotedesktop.google.com/_/oauthredirect" `
            --display-name="$pcname" `
            --pin="$pin"

      - name: üé¨ Install Subtitle Edit
        run: |
          Write-Host "Downloading and installing Subtitle Edit..."
          $url = "https://release-assets.githubusercontent.com/github-production-release-asset/16473585/17285f9b-2600-4344-a7dc-85feaf4f8acf?sp=r&sv=2018-11-09&sr=b&spr=https&se=2025-10-07T12%3A41%3A56Z&rscd=attachment%3B+filename%3DSubtitleEdit-4.0.13-Setup.exe&rsct=application%2Foctet-stream&skoid=96c2d410-5711-43a1-aedd-ab1947aa7ab0&sktid=398a6654-997b-47e9-b12b-9515b896b4de&skt=2025-10-07T11%3A41%3A19Z&ske=2025-10-07T12%3A41%3A56Z&sks=b&skv=2018-11-09&sig=Xjz6tq%2BRpCy30nnlDRdendB2K2noW1yAuqQscrazag4%3D&jwt=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmVsZWFzZS1hc3NldHMuZ2l0aHVidXNlcmNvbnRlbnQuY29tIiwia2V5Ijoia2V5MSIsImV4cCI6MTc1OTg0MDEyMiwibmJmIjoxNzU5ODM4MzIyLCJwYXRoIjoicmVsZWFzZWFzc2V0cHJvZHVjdGlvbi5ibG9iLmNvcmUud2luZG93cy5uZXQifQ.VHfJb_Qhn1tIltr3onA8ox57ig8XZPkp4L2Ht9DqKPI&response-content-disposition=attachment%3B%20filename%3DSubtitleEdit-4.0.13-Setup.exe&response-content-type=application%2Foctet-stream"
          $installer = "$env:TEMP\SubtitleEdit-Setup.exe"
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing
          Write-Host "Running installer silently..."
          Start-Process -FilePath $installer -ArgumentList "/VERYSILENT /NORESTART /SP-" -Wait
          Write-Host "Subtitle Edit installed successfully."

      - name: ‚è≥ Keep alive
        run: |
          $mins=[int]"${{ steps.cfg.outputs.runtime }}"
          $end=(Get-Date).AddMinutes($mins)
          while((Get-Date) -lt $end){
            $left=[int]([math]::Ceiling(($end-(Get-Date)).TotalMinutes))
            Write-Host "CRD alive... ($left min left)"
            Start-Sleep -Seconds 60
          }
